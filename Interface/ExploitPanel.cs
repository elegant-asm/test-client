using BepInEx.Unity.IL2CPP.Utils.Collections;
using Player;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using TestClient.Components;
using TestClient.Modules;
using UnityEngine;
using UnityEngine.UI;
using UniverseLib;
using UniverseLib.UI;
using UniverseLib.UI.Models;
using UniverseLib.UI.Panels;
using UniverseLib.UI.Widgets;

namespace TestClient.Interface;

internal class ExploitPanel : PanelBase {
    public ExploitPanel(UIBase owner) : base(owner) { }

    public override string Name => MyPluginInfo.PLUGIN_NAME;
    public override int MinWidth => 400;
    public override int MinHeight => 650;
    public override Vector2 DefaultAnchorMin => new();
    public override Vector2 DefaultAnchorMax => new();
    public override void SetActive(bool active) { }

    public static GameObject scrollContent;
    public static readonly Dictionary<string, object> configurableModules = [];

    protected override void ConstructPanelContent() {
        var UIRoot = UIFactory.CreateUIObject("Exploit", ContentRoot);
        UIFactory.SetLayoutGroup<VerticalLayoutGroup>(UIRoot, true, true, true, true, 2, 2, 2, 2, 2);
        UIFactory.SetLayoutElement(UIRoot, flexibleHeight: 9999);

        var scrollPool = UIFactory.CreateScrollPool<TransformCell>(UIRoot, "TransformTree", out GameObject scrollObj, out scrollContent, new Color(0.11f, 0.11f, 0.11f));
        UIFactory.SetLayoutElement(scrollObj, flexibleHeight: 9999);
        UIFactory.SetLayoutElement(scrollContent, flexibleHeight: 9999);

        var groups = typeof(ExploitPanel).GetNestedTypes()
            .Where(type => type.BaseType == typeof(ModuleGroup));

        Utility.SimpleUIFactory.MakeBottomSeparator(scrollContent, 2, Color.black);

        var groupsCount = groups.Count();
        int index = 0;
        foreach (var group in groups) {
            index++;
            Plugin.Log.LogMessage($"[Exploit Panel] Processing group '{group.Name}'");
            Text label = UIFactory.CreateLabel(scrollContent, "Label", group.Name.Replace("_", " "), TextAnchor.MiddleCenter, color: Utility.Color.FromRGB(252, 226, 5), fontSize: 16);
            UIFactory.SetLayoutElement(label.gameObject, minHeight: 25, minWidth: 140);

            Utility.SimpleUIFactory.MakeBottomSeparator(scrollContent, 2, Color.black);

            var modules = group.GetNestedTypes().Where(type => type.IsSubclassOf(typeof(ExploitModule)));
            foreach (var module in modules) {
                Plugin.Log.LogMessage($"[Exploit Panel] Processing module '{module.Name}'");
                ((ExploitModule)Activator.CreateInstance(module)).Construct();
            }
            if (index != groupsCount) {
                Utility.SimpleUIFactory.MakeBottomSeparator(scrollContent, 2, Color.black);
            }
        }

        var modulesHolder = Utility.World.CreateProtectedHolder();

        var _modules = Plugin.CurrentAssembly.GetTypes()
            .Where(type =>
                type.Namespace == $"{Plugin.CurrentAssemblyName}.Modules" &&
                type.BaseType == typeof(MonoBehaviour) &&
                !type.IsNested);
        foreach (var module in _modules) {
            Plugin.Log.LogMessage($"[Exploit Panel] Creating module {module.Name}");
            Utility.World.CreateProtectedComponent(module, modulesHolder);
        }

        foreach (var module in configurableModules.Values) {
            if (module.GetType().IsSubclassOf(typeof(ConfigurableModule)))
                ((ConfigurableModule)module).ActivateIfCached();
        }
    }

    public class Aim : ModuleGroup {
        public class RageBot : ToggleModule {
            public override string Text => "Rage Bot";
            public override bool DefaultValue => false;
            public override bool Saveable => false;
            public override void SetValue(bool value) {
                base.SetValue(value);
                if (value)
                    Components.CoroutinesComponent._instance.StartCoroutine(AimModule.RageBotThread().WrapToIl2Cpp());
            }
        }
        public class RageBotKeyBind : KeyBindModule {
            public override string Text => "Toggle";
            public override KeyCode DefaultValue => KeyCode.None;
        }
        public class RageBotType : DropdownModule {
            public override string[] Items => AimModule.rageBotTypes;
            public override string Text => "Type";
            public override string DefaultValue => AimModule.rageBotTypes[1];
        }
        public class RageBotCast : DropdownModule {
            public override string[] Items => AimModule.rageBotCasts;
            public override string Text => "Cast";
            public override string DefaultValue => AimModule.rageBotCasts[0];
        }
        public class RageBotVoxelResolutionToggle : ToggleModule {
            public override string Text => "Voxel Resolution";
            public override bool DefaultValue => true;
        }
        public class RageBotVoxelResolutionSlider : SliderModule {
            public override float Min => 1f;
            public override float Max => 6f;
            public override string Text => "Resolution";
            public override float DefaultValue => 3f;
        }
        public class RageBotWideCameraRangeToggle : ToggleModule {
            public override string Text => "Wide Camera Range";
            public override bool DefaultValue => false;
        }
        public class RageBotWideCameraRange : SliderModule {
            public override float Min => 0f;
            public override float Max => 6f;
            public override string Text => "Range";
            public override bool WholeNumbers => false;
            public override float DefaultValue => 2f;
        }
        public class RageBotIgnoreSpawnProtect : ToggleModule {
            public override string Text => "Ignore Spawn Protect";
            public override bool DefaultValue => false;
        }
        public class RageBotIgnoreSelfDeath : ToggleModule {
            public override string Text => "Ignore Self Death";
            public override bool DefaultValue => false;
        }
    }

    public class Anti_Aim : ModuleGroup {
        public class AntiAim : ToggleModule {
            public override string Text => "Anti Aim";
            public override bool DefaultValue => false;
        }
        public class AntiAimKeyBind : KeyBindModule {
            public override string Text => "Toggle";
            public override KeyCode DefaultValue => KeyCode.None;
        }
        public class AntiAimTarget : DropdownModule {
            public override string[] Items => AntiAimModule.Target;
            public override string Text => "Target";
            public override string DefaultValue => AntiAimModule.Target[0];
        }
        public class AAPredict : ToggleModule {
            public override string Text => "Predict";
            public override bool DefaultValue => false;
        }
        public class AAOEulerX : ToggleModule {
            public override string Text => "+ Orig Euler X";
            public override bool DefaultValue => true;
        }
        public class AAEulerX : SliderModule {
            public override float Min => 0f;
            public override float Max => 360f;
            public override string Text => "Euler X";
            public override float DefaultValue => 0f;
        }
        public class AAOEulerY : ToggleModule {
            public override string Text => "+ Orig Euler Y";
            public override bool DefaultValue => true;
        }
        public class AAEulerY : SliderModule {
            public override float Min => 0f;
            public override float Max => 360f;
            public override string Text => "Euler Y";
            public override float DefaultValue => 0f;
        }
    }

    public class Visuals : ModuleGroup {
        public class ESP : ToggleModule {
            public override string Text => "ESP";
            public override bool DefaultValue => false;
        }
    }

    public class Weapons : ModuleGroup {
        public class GunFireRate : SliderModule {
            public override float Min => 50f;
            public override float Max => 200f;
            public override string Text => "Fire Rate";
            public override float DefaultValue => 70f; // cuz 70 is optimal
            public override bool Saveable => false;
            //public override void SetValue(float value) {
            //    base.SetValue(value);
            //    if (WeaponsModule.overrideGunsFireRateToggle.GetValue() && Controll.pl != null && Controll.pl.currweapon != null)
            //        Utility.Weapon.SetFireRate(Controll.pl.currweapon.weaponname, (int)WeaponsModule.gunsFireRate.GetValue());
            //}
        }
        public class OverrideGunFireRate : ButtonModule {
            public override string Text => "Override";
            public override void OnClick() {
                if (Controll.pl == null || Controll.pl.currweapon == null)
                    return;
                Utility.Weapon.Get(Controll.pl.currweapon.weaponname).firerate.SetValue((int)WeaponsModule.gunFireRate.GetValue());
            }
        }
        public class ResetGunFireRate : ButtonModule {
            public override string Text => "Reset";
            public override void OnClick() {
                if (Controll.pl == null || Controll.pl.currweapon == null)
                    return;
                Utility.Weapon.Get(Controll.pl.currweapon.weaponname).firerate.ResetValue();
            }
        }
        public class ResetAllFireRate : ButtonModule {
            public override string Text => "Reset All";
            public override Color Color => Utility.Color.FromRGB(249, 59, 34);
            public override void OnClick() {
                Utility.Weapon.Reset<int>("firerate");
            }
        }
        public class GunFireType : SliderModule {
            public override float Min => 0f;
            public override float Max => 2f;
            public override string Text => "Fire Type";
            public override float DefaultValue => 0f; // 0 - automatic, 1 - single, 2 - burst
            public override bool Saveable => false;
        }
        public class OverrideGunFireType : ButtonModule {
            public override string Text => "Override";
            public override void OnClick() {
                if (Controll.pl == null || Controll.pl.currweapon == null || Controll.pl.currweapon.wi == null)
                    return;
                Controll.pl.currweapon.wi.firetype = (int)WeaponsModule.gunFireType.GetValue();
            }
        }
        //public class GunFireType : SliderModule {
        //    public override float Min => 0;
        //    public override float Max => 3;
        //    public override string Text => "Fire Type";
        //    public override float DefaultValue => 0;
        //    public override bool Saveable => false;
        //}
        //public class OverrideGunFireType : ButtonModule {
        //    public override string Text => "Override";
        //    public override void OnClick() {
        //        Utility.Weapon.Get(Controll.pl.currweapon.weaponname).firetype.SetValue((int)WeaponsModule.gunFireType.GetValue());
        //    }
        //}
        //public class ResetGunFireType : ButtonModule {
        //    public override string Text => "Reset";
        //    public override void OnClick() {
        //        if (Controll.pl == null || Controll.pl.currweapon == null)
        //            return;
        //        Utility.Weapon.Get(Controll.pl.currweapon.weaponname).firetype.ResetValue();
        //    }
        //}
        //public class ResetAllFireType : ButtonModule {
        //    public override string Text => "Reset All";
        //    public override Color Color => Utility.Color.FromRGB(249, 59, 34);
        //    public override void OnClick() {
        //        Utility.Weapon.Reset<int>("firetype");
        //    }
        //}
        public class DamageMultiplier : SliderModule {
            public override float Min => 1;
            public override float Max => 6;
            public override string Text => "Damage Multiplier";
            public override float DefaultValue => 1;
        }
        public class AutoReload : ToggleModule {
            public override string Text => "Auto Reload";
            public override bool DefaultValue => false;
            public override void SetValue(bool value) {
                base.SetValue(value);
                if (value)
                    CoroutinesComponent._instance.StartCoroutine(IAutoReload().WrapToIl2Cpp());
            }
        }
        private static IEnumerator IAutoReload() {
            while (WeaponsModule.autoReloadToggle.GetValue()) {
                if (Controll.pl != null && Controll.pl.currweapon != null && !Controll.inReload) {
                    Player.PlayerData client = Controll.pl;
                    Player.WeaponInfo wInfo = GUIInv.GetWeaponInfo(client.currweapon.weaponname);
                    Player.WeaponInv wInv = PLH.GetWeaponInv(client, client.currweapon.weaponname);
                    if (wInv.ammo < wInfo.ammo) {
                        if (WeaponsModule.fastReloadToggle.GetValue())
                            CoroutinesComponent._instance.StartCoroutine(WeaponsModule.FastReload(false).WrapToIl2Cpp()); // I hate c# coroutines or maybe im stupid?
                        else
                            Controll.ReloadWeapon();
                    }
                }
                yield return new WaitForSeconds(0.1f);
            }
        }
        public class FastReload : ToggleModule {
            public override string Text => "Fast Reload";
            public override bool DefaultValue => false;
        }
        public class FastReloadDelay : SliderModule {
            public override float Min => 0f;
            public override float Max => 1f;
            public override bool WholeNumbers => false;
            public override string Text => "Delay";
            public override float DefaultValue => 0.55f;
        }
        public class NoSpread : ToggleModule {
            public override string Text => "No Spread";
            public override bool DefaultValue => false;
        }
        public class NoRecoil : ToggleModule {
            public override string Text => "No Recoil";
            public override bool DefaultValue => false;
            public override void SetValue(bool value) {
                base.SetValue(value);
                if (value) {
                    WeaponsModule.SetNoRecoil();
                } else {
                    Utility.Weapon.Clear<int>("recoil");
                    Utility.Weapon.Clear<int>("accuracy");
                }
            }
        }
        public class UnforceWeapon : ToggleModule {
            public override string Text => "Unforce Weapon";
            public override bool DefaultValue => false;
        }
        public class AlwaysRegisterAsHead : ToggleModule {
            public override string Text => "Always Register As Head";
            public override bool DefaultValue => false;
        }
        // uh maybe there's another way to do that??
        //public class ShootInReload : ToggleModule {
        //    public override string Text => "Shoot In Reload";
        //    public override bool DefaultValue => false;
        //    public override void SetValue(bool value) {
        //        base.SetValue(value);
        //        if (value)
        //            CoroutinesComponent._instance.StartCoroutine(IShootInReload().WrapToIl2Cpp());
        //    }
        //}
        //private static IEnumerator IShootInReload() {
        //    while (WeaponsModule.shootInReloadToggle.GetValue()) {
        //        if (Input.GetKey(KeyCode.Mouse0) && Controll.inReload && Controll.pl.currweapon != null && Controll.pl.currweapon.wi.firetype == 0) {
        //            Controll.cs.UpdateWeaponAttack();
        //            yield return new WaitForSeconds(GUIInv.GetWeaponInfo(Controll.pl.currweapon.weaponname).firerate / 1000f);
        //        } else if (Input.GetKeyDown(KeyCode.Mouse0) && Controll.inReload && Controll.pl.currweapon != null && Controll.pl.currweapon.wi.firetype == 1)
        //            Controll.cs.UpdateWeaponAttack();
        //        yield return null;
        //    }
        //}
    }

    public class Antis : ModuleGroup {
        public class NoCameraShake : ToggleModule {
            public override string Text => "No Camera Shake";
            public override bool DefaultValue => false;
        }
        public class NoStuckState : ToggleModule {
            public override string Text => "No Stuck State";
            public override bool DefaultValue => false;
        }
        //public class AirCrouch : ToggleModule {
        //    public override string Text => "Air Crouch";
        //    public override bool DefaultValue => false;
        //}
    }

    public class Movement : ModuleGroup {
        public class BetterMovement : ToggleModule {
            public override string Text => "Better Movement";
            public override bool DefaultValue => true;
        }
        public class OverrideWalkSpeed : ToggleModule {
            public override string Text => "Override Walk Speed";
            public override bool DefaultValue => false;
        }
        public class WalkSpeed : SliderModule {
            public override float Min => 0;
            public override float Max => Controll.default_speed + 2;
            public override bool WholeNumbers => false;
            public override string Text => "Speed";
            public override float DefaultValue => Controll.default_speed;
        }
        public class FakeDuck : ToggleModule {
            public override string Text => "Fake Duck";
            public override bool DefaultValue => false;
        }
        public class FakeDuckKeyBind : KeyBindModule {
            public override string Text => "Toggle";
            public override KeyCode DefaultValue => KeyCode.None;
        }
        public class FreeFly : ToggleModule {
            public override string Text => "Free Fly";
            public override bool DefaultValue => false;
            public override bool Saveable => false;
            public override void SetValue(bool value) {
                base.SetValue(value);
                Controll.freefly = value;
            }
        }
        public class FreeFlyKeyBind : KeyBindModule {
            public override string Text => "Toggle";
            public override KeyCode DefaultValue => KeyCode.None;
        }
        public class AutoJump : ToggleModule {
            public override string Text => "Auto Jump";
            public override bool DefaultValue => false;
        }
        public class TargetStrafe : ToggleModule {
            public override string Text => "Target Strafe";
            public override bool DefaultValue => false;
        }
        public class TargetStrafeKeyBind : KeyBindModule {
            public override string Text => "Toggle";
            public override KeyCode DefaultValue => KeyCode.None;
        }
        public class TargetStrafeIgnoreSpawnProtect : ToggleModule {
            public override string Text => "Ignore Spawn Protect";
            public override bool DefaultValue => false;
        }
        public class TargetStrafeType : DropdownModule {
            public override string[] Items => MovementModule.targetStrafeTypes;
            public override string Text => "Type";
            public override string DefaultValue => MovementModule.targetStrafeTypes[0];
        }
        public class TargetStrafeDistance : SliderModule {
            public override float Min => 0.1f;
            public override float Max => 7f;
            public override string Text => "Distance";
            public override bool WholeNumbers => false;
            public override float DefaultValue => 2f;
        }
        public class TargetStrafeYLimit : SliderModule {
            public override float Min => 1f;
            public override float Max => 7f;
            public override string Text => "Y Limit";
            public override float DefaultValue => 4f;
        }
        public class TargetStrafeSpeed : SliderModule {
            public override float Min => 0.1f;
            public override float Max => 7f;
            public override string Text => "Speed";
            public override bool WholeNumbers => false;
            public override float DefaultValue => 5f;
        }
        public class TargetStrafeDistanceTrigger : SliderModule {
            public override float Min => 1f;
            public override float Max => 100f;
            public override string Text => "Trigger Distance";
            public override float DefaultValue => 2f;
        }
    }

    public class Players : ModuleGroup {
        public class TargetTextPlayer : OptionModule<string> {
            public override string Text => "TargetText";
            public override string DefaultValue => "";
            public override bool Saveable => false;
        }
        public class TargetPlayer : DropdownModule {
            public override string[] Items => ["None"];
            public override string Text => "Target";
            public override string DefaultValue => "None";
            public override bool Saveable => false;
            public override void SetValue(string value) {
                base.SetValue(value);
                if (value != "None") {
                    PlayersModule.targetTextPlayer.CSetValue(value);
                    PlayersModule.targetData = PLH.player.FirstOrDefault(player => player != null && player.name == value) ?? null;
                    PlayersModule.targetSync = PlayersModule.targetData != null ? Utility.Players.GetPlayerSyncById(PlayersModule.targetData.idx) : null;
                }
            }
        }
    }

    public class Additional : ModuleGroup {
        public class FOV : SliderModule {
            public override float Min => 10f;
            public override float Max => 180f;
            public override string Text => "FOV";
            public override float DefaultValue => 90f;
            public override void SetValue(float value) {
                base.SetValue(value);
                if (AdditionalModule.customCamera != null)
                    AdditionalModule.customCamera.fieldOfView = value;
                if (Controll.csCam != null)
                    Controll.csCam.fieldOfView = value;
            }
        }
        public class ThirdPerson : ToggleModule {
            public override string Text => "Third Person";
            public override bool DefaultValue => false;
            public override bool Saveable => false;
            public override void SetValue(bool value) {
                base.SetValue(value);
                if (Controll.csRadarCam)
                    Controll.csRadarCam.enabled = !value;
                if (Controll.csRadarCam2)
                    Controll.csRadarCam2.enabled = !value;
                if (Controll.csCam)
                    Controll.csCam.enabled = !value;
                if (AdditionalModule.customCamera)
                    AdditionalModule.customCamera.enabled = value;

                HUDNames.show = !value;

                for (int i = 0; i < PLH.player.Count; i++) {
                    PlayerData player = PLH.player[i];
                    if (player != null && player.goArrow != null)
                        player.goArrow.SetActive(!value);
                }

                if (!value) {
                    if (Controll.trControll != null) {
                        Transform[] allChildren = Controll.trControll.GetComponentsInChildren<Transform>();
                        foreach (Transform child in allChildren) {
                            if (child.name.StartsWith("Arrow")) {
                                child.gameObject.SetActive(true);
                                break;
                            }
                        }
                    }
                    if (Controll.pl != null && Controll.pl.go != null)
                        Controll.pl.go.transform.position = Vector3.down * 2000f;
                }
            }
        }
        public class ThirdPersonKeyBind : KeyBindModule {
            public override string Text => "Toggle";
            public override KeyCode DefaultValue => KeyCode.None;
        }
        public class AlwaysRenderCharacters : ToggleModule {
            public override string Text => "Always Render Characters";
            public override bool DefaultValue => false;
        }
        public class InstantGrenade : ToggleModule {
            public override string Text => "Instant Grenade";
            public override bool DefaultValue => false;
        }
        public class GrenadeSortRange : SliderModule {
            public override float Min => 1f; // 1.5f lethal
            public override float Max => 8f;
            public override string Text => "Sort Range";
            public override float DefaultValue => 8f;
        }
        public class InstantGrenadeKillType : DropdownModule {
            public override string[] Items => AdditionalModule.grenadeKillTypes;
            public override string Text => "Grenade TP Sort";
            public override string DefaultValue => AdditionalModule.grenadeKillTypes[0];
        }
        public class InstantGrenadeIgnoreSpawnProtect : ToggleModule {
            public override string Text => "Ignore Spawn Protect";
            public override bool DefaultValue => false;
        }
    }

    public class Chat : ModuleGroup {
        public class ChatFilter : ToggleModule {
            public override string Text => "Chat Filter";
            public override bool DefaultValue => true;
        }
        public class ChatMessage : DropdownModule {
            public override string[] Items => ChatModule.messageItems;
            public override string Text => "Message";
            public override string DefaultValue => ChatModule.messageItems[0];
            //public override bool Saveable => false;
        }
        public class ChatMessageSend : ButtonModule {
            public override string Text => "Send";
            public override void OnClick() {
                var choice = ChatModule.chatMessage.GetValue();
                if (ChatModule.messages.ContainsKey(choice)) {
                    var message = ChatModule.messages[choice];
                    if (message.Values != null)
                        CoroutinesComponent._instance.StartCoroutine(ChatModule.SendMessage(message.Values, message.Delay).WrapToIl2Cpp());
                    else
                        ChatModule.SendMessage(message.Value);
                }
            }
        }
        public class SpamMessageDelay : SliderModule {
            public override float Min => 1f;
            public override float Max => 15f;
            public override string Text => "Delay";
            public override bool WholeNumbers => false;
            public override float DefaultValue => 8f; // 1msg per 8s is perfect, but better put to 15s
        }
        public class SpamMessage : ToggleModule {
            public override string Text => "Spam";
            public override bool DefaultValue => false;
            public override bool Saveable => false;
            public override void SetValue(bool value) {
                base.SetValue(value);
                if (value)
                    CoroutinesComponent._instance.StartCoroutine(ChatModule.SpamMessage().WrapToIl2Cpp());
            }
        }
        public class SendOnKill : ToggleModule {
            public override string Text => "Send On Kill";
            public override bool DefaultValue => false;
        }
    }

    // thinking about how to make it
    //public class Cases : ModuleGroup {
    //    public class LevelCaseOverride : DropdownModule {
    //        public override string[] Items => CasesModule.cases["level"].weapons;
    //        public override string Text => "Level";
    //        public override string DefaultValue => CasesModule.cases["level"].weapons[0];
    //        public override bool Saveable => false;
    //    }
    //}
}

#region Base Modules
public abstract class DropdownModule : ModuleBase<string> {
    internal List<string> _items; // used to change options
    public abstract string[] Items { get; }
    public virtual TextAnchor TextAlignment => TextAnchor.MiddleLeft;
    public virtual Color TextColor => default;
    public virtual bool SupportRichText => true;
    public virtual int FontSize => 14;

    public virtual Dropdown Dropdown { get; private set; }

    public override void Construct() {
        _items = Items.ToList();
        var defaultValue = GetValue();

        GameObject group = UIFactory.CreateHorizontalGroup(ExploitPanel.scrollContent, Name, false, false, true, true, spacing: 5);

        Text label = UIFactory.CreateLabel(group, "Label", $" {Text}", TextAlignment, TextColor, SupportRichText, FontSize);
        UIFactory.SetLayoutElement(label.gameObject, minHeight: 25, minWidth: 140);
        UIFactory.CreateDropdown(group, Name, out Dropdown dropdown, defaultValue, 14, (value) => {
            var item = _items[value];
            if (item != null)
                SetValue(item);
        }, Items);
        Dropdown = dropdown;
        UIFactory.SetLayoutElement(dropdown.gameObject, minHeight: 25, flexibleWidth: 9999);

        for (int i = 0; i < Items.Length; i++) {
            if (defaultValue == Items[i]) {
                dropdown.value = i;
                break;
            }
        }
        dropdown.RefreshShownValue();
    }

    public override void SetValue(string value) {
        base.SetValue(value);
    }

    public virtual void AddOption(string value) {
        Dropdown.options.Add(new(value));
        _items.Add(value);
    }
    public virtual void RemoveOption(string value, int setTo = 0) {
        Dropdown.ClearOptions();
        var choosen = _items[Dropdown.value];
        Il2CppSystem.Collections.Generic.List<Dropdown.OptionData> options = new();
        _items.Remove(value);
        for (int i = 0; i < _items.Count; i++) {
            var item = _items[i];
            if (item != null)
                options.Add(new(item));
        }
        Dropdown.AddOptions(options);
        //Plugin.Log.LogWarning($"dropdown {choosen}, {Dropdown.value}");
        if (choosen == value) // tbh idk how it would be on others, but just to be sure ill leave here comment, basically for "None" on first option
            Dropdown.value = 0;
        else
            Dropdown.value = _items.IndexOf(choosen);
        Dropdown.RefreshShownValue();
    }
    public virtual void ClearOptions() {
        Dropdown.ClearOptions();
        _items.Clear();
    }
}

public abstract class ToggleModule : ModuleBase<bool> {
    public virtual Toggle Toggle { get; private set; }

    public override void Construct() {
        var defaultValue = GetValue();

        UIFactory.CreateToggle(ExploitPanel.scrollContent, Name, out Toggle toggle, out Text toggleText);
        Toggle = toggle;
        UIFactory.SetLayoutElement(toggle.gameObject, minHeight: 25, flexibleWidth: 9999);

        toggle.isOn = defaultValue;
        toggleText.text = Text;

        toggle.onValueChanged.AddListener(SetValue);
    }
}

public abstract class OptionModule<T> : ModuleBase<T> {
    public virtual bool WholeNumbers => typeof(T) == typeof(int);
    public virtual T Min { get; }
    public virtual T Max { get; }
    public virtual string PlaceholderText => typeof(T).ToString();
    public virtual TextAnchor TextAlignment => TextAnchor.MiddleLeft;
    public virtual Color TextColor => default;
    public virtual bool SupportRichText => true;
    public virtual int FontSize => 14;
    public virtual Color ApplyButtonColor => Utility.Color.FromRGB(7, 122, 81);

    public virtual InputFieldRef InputField { get; private set; }

    private T listenedValue;

    public override void Construct() {
        listenedValue = GetValue();

        GameObject group = UIFactory.CreateHorizontalGroup(ExploitPanel.scrollContent, Name, false, false, true, true, spacing: 5);

        Text label = UIFactory.CreateLabel(group, "Label", $" {Text}", TextAlignment, TextColor, SupportRichText, FontSize);
        UIFactory.SetLayoutElement(label.gameObject, minHeight: 25, minWidth: 140);
        InputFieldRef inputField = UIFactory.CreateInputField(group, "InputField", PlaceholderText);
        InputField = inputField;
        UIFactory.SetLayoutElement(inputField.GameObject, minHeight: 25, flexibleWidth: 9999);
        inputField.Text = listenedValue.ToString();
        ButtonRef apply = UIFactory.CreateButton(group, "Apply", "Apply", ApplyButtonColor);
        UIFactory.SetLayoutElement(apply.GameObject, minHeight: 25, minWidth: 60, flexibleWidth: 0);

        apply.OnClick += () => SetValue(listenedValue);

        inputField.OnValueChanged += (value) => {
            try {
                listenedValue = Configuration.ConfigHandler.StringToConfigValue<T>(value);
                if (ValueType == typeof(int)) {
                    var num = listenedValue.TryCast<int>();
                    listenedValue = num <= Min.TryCast<int>() ? Min : num >= Max.TryCast<int>() ? Max : listenedValue;
                } else if (ValueType == typeof(float)) {
                    var num = listenedValue.TryCast<float>();
                    listenedValue = num <= Min.TryCast<float>() ? Min : num >= Max.TryCast<float>() ? Max : listenedValue;
                }
            } catch {// (Exception ex) {
                //Plugin.Logger.LogWarning($"OptionModule value conversion errored: '{ex.Message}'");
            }
        };
    }

    public void CSetValue(T value) {
        listenedValue = value;
        InputField.Text = value.ToString();
        SetValue(listenedValue);
    }
}

public abstract class KeyBindModule : ModuleBase<KeyCode> {
    public virtual TextAnchor TextAlignment => TextAnchor.MiddleLeft;
    public virtual Color TextColor => default;
    public virtual bool SupportRichText => true;
    public virtual int FontSize => 14;

    public virtual ButtonRef BindButton { get; private set; }

    //public override KeyCode GetValue() {
    //    if (InputComponent.RegisteredKey != KeyCode.None)
    //        return base.GetValue();
    //    return KeyCode.None;
    //}

    public override void Construct() {
        // maybe I should impl to idea with ModuleGroup?
        GameObject group = UIFactory.CreateHorizontalGroup(ExploitPanel.scrollContent, Name, false, false, true, true, spacing: 5);

        Text label = UIFactory.CreateLabel(group, "Label", " Keybind", TextAlignment, TextColor, SupportRichText, FontSize);
        UIFactory.SetLayoutElement(label.gameObject, minHeight: 25, minWidth: 140);
        ButtonRef keybind = UIFactory.CreateButton(group, "KeyBind", GetValue().ToString());
        BindButton = keybind;
        UIFactory.SetLayoutElement(keybind.GameObject, minHeight: 25, flexibleWidth: 9999);

        KeyCode prevKeyBind = GetValue();

        keybind.OnClick = () => {
            keybind.ButtonText.text = "...";
            InputComponent.RegisterKey((value) => {
                //if (value == KeyCode.Escape)
                //    value = KeyCode.None;
                if (value == prevKeyBind)
                    value = KeyCode.None;
                prevKeyBind = value;
                SetValue(value);
                keybind.ButtonText.text = value.ToString();
            });
        };

        keybind.ButtonText.text = prevKeyBind.ToString();
    }
}

public abstract class SliderModule : ModuleBase<float> {
    public abstract float Min { get; }
    public abstract float Max { get; }
    public virtual bool WholeNumbers => true;
    public virtual TextAnchor TextAlignment => TextAnchor.MiddleLeft;
    public virtual Color TextColor => default;
    public virtual bool SupportRichText => true;
    public virtual int FontSize => 14;

    public virtual Slider Slider { get; private set; }

    public override void Construct() {
        var defaultValue = GetValue();

        GameObject group = UIFactory.CreateHorizontalGroup(ExploitPanel.scrollContent, Name, false, false, true, true, spacing: 5);

        Text label = UIFactory.CreateLabel(group, "Label", $" {Text} ({defaultValue})", TextAlignment, TextColor, SupportRichText, FontSize);
        UIFactory.SetLayoutElement(label.gameObject, minHeight: 25, minWidth: 140);

        UIFactory.CreateSlider(group, "Slider", out Slider slider);
        Slider = slider;
        UIFactory.SetLayoutElement(slider.gameObject, minHeight: 25, flexibleWidth: 9999);
        slider.wholeNumbers = WholeNumbers;
        slider.minValue = Min;
        slider.maxValue = Max;
        slider.Set(defaultValue);

        slider.onValueChanged.AddListener(value => {
            SetValue(value);
            label.text = $" {Text} ({value})";
        });
    }
}

public abstract class ButtonModule : ExploitModule {
    public abstract string Text { get; }
    public virtual Color Color => Utility.Color.FromRGB(7, 122, 81);

    public override void Construct() {
        Name ??= this.GetType().Name;
        ButtonRef button = UIFactory.CreateButton(ExploitPanel.scrollContent, Name, Text, Color);
        UIFactory.SetLayoutElement(button.GameObject, minHeight: 25, flexibleWidth: 9999);

        button.OnClick += OnClick;
    }
    public abstract void OnClick();
}

public abstract class ModuleBase<T> : ConfigurableModule {
    public abstract string Text { get; }
    public abstract T DefaultValue { get; }

    public virtual Type ValueType => typeof(T);
    internal Configuration.Config<T> Config { get; set; }
    public virtual bool Saveable => true;

    protected ModuleBase() {
        Name ??= this.GetType().Name;
        Config = new(Name, DefaultValue, Saveable);
        if (!ExploitPanel.configurableModules.ContainsKey(Name))
            ExploitPanel.configurableModules.Add(Name, this);
    }

    public override void ActivateIfCached() {
        SetValue(Config.Value);
    }

    public virtual T GetValue() => Config.Value;
    public virtual void SetValue(T value) => Config.SetValue(value);
}

public abstract class ConfigurableModule : ExploitModule {
    public virtual void ActivateIfCached() { }
}

public class ModuleGroup { }
public abstract class ExploitModule {
    public virtual string Name { get; set; }

    public abstract void Construct();
}
#endregion